import requests
import random
import string
import os

from requests_toolbelt.multipart.encoder import MultipartEncoder
from utils.utils import is_vulnerable

class C10_HTMLComment:
    def execute(file_upload_url):
        headers, encoder = C10_HTMLComment.get_requests()

        response = requests.post(file_upload_url, data=encoder, headers=headers)
        status = "Vulnerable" if is_vulnerable(response.text, response.status_code) else "Not Vulnerable"

        encoder.fields["image"][1].close()

        return {
            "ID": "C10",
            "Name": "Prepending an HTML Comment",
            "Score": "6.3",
            "Severity": "Medium",
            "Status": status,
        }
    
    def get_requests():
        user_agent = os.getenv("USER_AGENT")
        seed_path = "./resources/seed.html"
        modified_seed_path = "./resources/modified/C10_modified_seed.html"
        boundary = '----WebKitFormBoundary' + ''.join(random.sample(string.ascii_letters + string.digits, 16))

        with open(modified_seed_path, "w") as modified_seed:
            with open(seed_path, "r") as seed:
                modified_seed.write("<!--" + "#"*4096 + "-->")
                modified_seed.write(seed.read())
                seed.close()
            modified_seed.close()

        encoder = MultipartEncoder(
            fields={'image': ('C10_modified_seed.html', open(modified_seed_path, 'rb'), 'text/plain'), "submit": "submit"},
            boundary=boundary,
        )
        headers = {'Content-Type': encoder.content_type, 'User-Agent': user_agent, "Connection": "keep-alive"}

        return headers, encoder