import unittest
import os

from utils.request import get_request
from vulnerability_gap.vg8 import VG8_ConvertHTMLtoEML

class TestVG8(unittest.TestCase):
    def test_modify_encoder(self):
        seed_path = "./resources/seed.html"
        modified_seed_path = "./resources/modified/VG8_modified_seed.eml"
        data = ''
        base_data='''TESTEML
Content-Type: text/html
Content-Transfer-Encoding: quoted-printable

'''
        normalstr = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890 \n\t'
        emlenc = lambda x: '='+hex(ord(x))[2:]

        with open(seed_path, "r") as seed:
                for line in seed:
                    for char in line:
                        if char not in normalstr:
                            data +=emlenc(char)
                        else:
                            data += char
                seed.close()

        headers, encoder = get_request()
        modified_encoder = VG8_ConvertHTMLtoEML.modify_encoder(encoder)

        self.assertEqual(headers["Connection"], "keep-alive")
        self.assertEqual(headers["User-Agent"], os.getenv("USER_AGENT"))
        self.assertEqual(headers["Content-Type"], modified_encoder.content_type)

        self.assertTrue(os.path.exists(modified_seed_path))

        with open(modified_seed_path, "r") as modified_seed:
            self.assertEqual(modified_seed.read(), base_data + data)
            modified_seed.close()

        encoder.fields["image"][1].close()
        modified_encoder.fields["image"][1].close()

if __name__ == '__main__':
    unittest.main()