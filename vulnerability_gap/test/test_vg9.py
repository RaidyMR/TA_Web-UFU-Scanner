import unittest
import os

from utils.request import get_request
from vulnerability_gap.vg9 import VG9_ConvertingHTMLtoSVG

class TestVG9(unittest.TestCase):
    def test_modify_encoder(self):
        seed_path = "./resources/seed.html"
        modified_seed_path = "./resources/modified/VG9_modified_seed.svg"
        base_headdata = """<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 96 105">\n"""
        base_taildata = """\n  <g fill="#97C024" stroke="#97C024" stroke-linejoin="round" stroke-linecap="round">
        <path d="M14,40v24M81,40v24M38,68v24M57,68v24M28,42v31h39v-31z" stroke-width="12"/>
        <path d="M32,5l5,10M64,5l-6,10 " stroke-width="2"/>
    </g>
    <path d="M22,35h51v10h-51zM22,33c0-31,51-31,51,0" fill="#97C024"/>
    <g fill="#FFF">
        <circle cx="36" cy="22" r="2"/>
        <circle cx="59" cy="22" r="2"/>
    </g>
    </svg>
    """
        headers, encoder = get_request()
        modified_encoder = VG9_ConvertingHTMLtoSVG.modify_encoder(encoder)

        self.assertEqual(headers["Connection"], "keep-alive")
        self.assertEqual(headers["User-Agent"], os.getenv("USER_AGENT"))
        self.assertEqual(headers["Content-Type"], modified_encoder.content_type)

        self.assertTrue(os.path.exists(modified_seed_path))
        with open(modified_seed_path, "r") as modified_seed:
            with open(seed_path, "r") as seed:
                self.assertEqual(modified_seed.read(), base_headdata + seed.read() + base_taildata)
                seed.close()
            modified_seed.close()

        encoder.fields["image"][1].close()
        modified_encoder.fields["image"][1].close()

if __name__ == '__main__':
    unittest.main()