import requests
import random
import string
import os

from requests_toolbelt.multipart.encoder import MultipartEncoder
from utils.request import get_request
from utils.utils import is_vulnerable

class VG9_ConvertingHTMLtoSVG:
    def execute(file_upload_url):
        headers, encoder = get_request()
        modified_encoder = VG9_ConvertingHTMLtoSVG.modify_encoder(encoder)

        response = requests.post(file_upload_url, data=modified_encoder, headers=headers)
        status = "Vulnerable" if is_vulnerable(response.text, response.status_code) else "Not Vulnerable"

        encoder.fields["image"][1].close()

        return {
            "ID": "VG9",
            "Name": "Converting HTML into SVG",
            "Score": "6.3",
            "Severity": "Medium",
            "Status": status,
        }
    
    # def get_requests():
    #     user_agent = os.getenv("USER_AGENT")
    #     seed_path = "./resources/seed.html"
    #     modified_seed_path = "./resources/modified/C9_modified_seed.svg"

    #     boundary = '----WebKitFormBoundary' + ''.join(random.sample(string.ascii_letters + string.digits, 16))

    #     base_headdata = """<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 96 105">\n"""
    #     base_taildata = """\n  <g fill="#97C024" stroke="#97C024" stroke-linejoin="round" stroke-linecap="round">
    #     <path d="M14,40v24M81,40v24M38,68v24M57,68v24M28,42v31h39v-31z" stroke-width="12"/>
    #     <path d="M32,5l5,10M64,5l-6,10 " stroke-width="2"/>
    # </g>
    # <path d="M22,35h51v10h-51zM22,33c0-31,51-31,51,0" fill="#97C024"/>
    # <g fill="#FFF">
    #     <circle cx="36" cy="22" r="2"/>
    #     <circle cx="59" cy="22" r="2"/>
    # </g>
    # </svg>
    # """
        
    #     with open(modified_seed_path, "w") as modified_seed:
    #         with open(seed_path, "r") as seed:
    #             modified_seed.write(base_headdata + seed.read() + base_taildata)
    #             seed.close()
    #         modified_seed.close()

    #     encoder = MultipartEncoder(
    #         fields={'image': ('seed.html', open(modified_seed_path, 'rb'), 'text/plain'), "submit": "submit"},
    #         boundary=boundary,
    #     )
    #     headers = {'Content-Type': encoder.content_type, 'User-Agent': user_agent, "Connection": "keep-alive"}

    #     return headers, encoder
    
    def modify_encoder(encoder):
        seed_path = "./resources/seed.html"
        modified_seed_path = "./resources/modified/VG9_modified_seed.svg"

        base_headdata = """<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 96 105">\n"""
        base_taildata = """\n  <g fill="#97C024" stroke="#97C024" stroke-linejoin="round" stroke-linecap="round">
        <path d="M14,40v24M81,40v24M38,68v24M57,68v24M28,42v31h39v-31z" stroke-width="12"/>
        <path d="M32,5l5,10M64,5l-6,10 " stroke-width="2"/>
    </g>
    <path d="M22,35h51v10h-51zM22,33c0-31,51-31,51,0" fill="#97C024"/>
    <g fill="#FFF">
        <circle cx="36" cy="22" r="2"/>
        <circle cx="59" cy="22" r="2"/>
    </g>
    </svg>
    """
        
        with open(modified_seed_path, "w") as modified_seed:
            with open(seed_path, "r") as seed:
                modified_seed.write(base_headdata + seed.read() + base_taildata)
                seed.close()
            modified_seed.close()

        modified_encoder = MultipartEncoder(
            fields={'image': ('VG9_modified_seed.svg', open(modified_seed_path, 'rb'), 'text/plain'), "submit": "submit"},
            boundary=encoder.boundary[2:],
        )

        return modified_encoder
